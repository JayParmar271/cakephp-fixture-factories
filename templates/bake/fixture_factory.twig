{#
/**
*
* Licensed under The MIT License
* For full copyright and license information, please see the LICENSE.txt
* Redistributions of files must retain the above copyright notice.
*
* @copyright     Copyright (c) 2020 Juan Pablo Ramirez and Nicolas Masson
* @link          https://webrider.de/
* @since         1.0.0
* @license       http://www.opensource.org/licenses/mit-license.php MIT License
*/
#}
<?php
declare(strict_types=1);

namespace {{ namespace }};

use CakephpFixtureFactories\Factory\BaseFactory as CakephpBaseFactory;
use Faker\Generator;

/**
 * {{ factory }}
 */
class {{ factory }} extends CakephpBaseFactory
{
    /**
     * Defines the Table Registry used to generate entities with
     *
     * @return string
     */
    protected function getRootTableRegistryName(): string
    {
        return '{{ rootTableRegistryName }}';
    }

    /**
     * Defines the default values of you factory. Useful for
     * not nullable fields. You may use methods of the factory here too.
     *
     * @return void
     */
    protected function setDefaultTemplate(): void
    {
        $this->setDefaultData(function (Generator $faker) {
            return [
                // set the model's default values
                // For example:
                // 'name' => $faker->lastName
            ];
        });
    }
{% for association, associationFactory in toOne %}

    /**
     * @param array $parameter
     *
     * @return {{ factory }}
     */
    public function with{{ association }}(array $parameter = null): {{ factory }}
    {
        return $this->with(
            '{{ association }}',
            \{{ associationFactory }}::make($parameter)
        );
    }
{% endfor %}
{% for association, associationFactory in oneToMany %}

    /**
    * @param array $parameter
    * @param int $n
    *
    * @return {{ factory }}
    */
    public function with{{ association }}(array $parameter = null, int $n = 1): {{ factory }}
    {
        return $this->with(
            '{{ association }}',
            \{{ associationFactory }}::make($parameter, $n)->without('{{ modelNameSingular }}')
        );
    }
{% endfor %}
{% for association, associationFactory in manyToMany %}

    /**
    * @param array $parameter
    * @param int $n
    * @return {{ factory }}
    */
    public function with{{ association }}(array $parameter = null, int $n = 1): {{ factory }}
    {
        return $this->with(
            '{{ association }}',
            \{{ associationFactory }}::make($parameter, $n)->without('{{ modelName }}')
        );
    }
{% endfor %}
}